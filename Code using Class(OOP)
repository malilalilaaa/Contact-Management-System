#include<iostream>
#include<string>
using namespace std;

# define Max 1000

const string PASSWORD = "L75M09";

class Contact {
public:
    string cName;
    int cGender = 1;
    int cAge = 0;
    string cPhone;
    string cAdd;
    string cID;
    bool isVIP;
};

class ContactBooks {
private:
    Contact contactsArry[Max];
    int aCount = 0;
public:
    void showMenu() {
        cout << "                                       " << endl;
        cout << "         Contact Management System     " << endl;
        cout << "        ===========================    " << endl;
        cout << "       1. Add contacts  " << endl;
        cout << "       2. Display contacts  " << endl;
        cout << "       3. Delete contacts  " << endl;
        cout << "       4. Find contact  " << endl;
        cout << "       5. Modify contacts  " << endl;
        cout << "       6. VIP Customers " << endl;
        cout << "       7. Clear contacts   " << endl;
        cout << "       0. Exit contact book  " << endl;
    }

    void AddContacts() {
        if (aCount == Max) {
            cout << "The address book is full and cannot be added!" << endl;
            return;
        }
        else {
            string name;
            cout << "Please enter Customer name: " << endl;
            cin >> name;
            contactsArry[aCount].cName = name;

            int gender;
            cout << "Please enter Customer's gender: " << endl;
            cout << "1 Male" << endl;
            cout << "2 Female" << endl;

            while (true) {
                cin >> gender;
                if (gender == 1 || gender == 2) {
                    contactsArry[aCount].cGender = gender;
                    break;
                }
                cout << "Input error, please re-enter!" << endl;
            }

            int age;
            cout << "Please enter Customer's age: " << endl;
            cin >> age;
            contactsArry[aCount].cAge = age;

            string phone;
            cout << "Please enter the Customer's phone number: " << endl;
            cin >> phone;
            contactsArry[aCount].cPhone = phone;

            string add;
            cout << "Please enter Customer's address: " << endl;
            cin >> add;
            contactsArry[aCount].cAdd = add;

            string Id;
            cout << "Please Enter Customer's ID: " << endl;
            cin >> Id;
            contactsArry[aCount].cID = Id;

            string vipOption;
            cout << "Is the customer a VIP (Y/N)? ";
            cin >> vipOption;
            contactsArry[aCount].isVIP = (vipOption == "Y" || vipOption == "y");

            aCount += 1;
            cout << "Added successfully!" << endl;
            system("pause");
            system("cls");
        }
    }

    void ShowContacts() {
        if (aCount == 0) {
            cout << "No contacts found in the address book." << endl;
        }
        else {
            for (int i = 0; i < aCount; i++) {
                cout << "Name: " << contactsArry[i].cName << endl;
                cout << "Gender: " << (contactsArry[i].cGender != 2 ? "Male" : "Female") << endl;
                cout << "Age: " << contactsArry[i].cAge << endl;
                cout << "Telephone: " << contactsArry[i].cPhone << endl;
                cout << "Address: " << contactsArry[i].cAdd << endl;
                cout << "ID: " << contactsArry[i].cID << endl;
            }
        }
        system("pause");
        system("cls");
    }

    int IsExist(string name) {
        for (int i = 0; i < aCount; i++) {
            if (contactsArry[i].cName == name) {
                return i;
            }
        }
        return -1;
    }

    void DeleteContacts() {
        string name;
        cout << "Please enter the name of the user you want to delete: " << endl;
        cin >> name;
        int index = IsExist(name);
        if (index > -1) {
            for (int i = index; i < aCount - 1; i++) {
                Contact temp = contactsArry[i];
                contactsArry[i] = contactsArry[i + 1];
                contactsArry[i + 1] = temp;
            }
            aCount--;
            cout << "Delete successfully!" << endl;
        }
        else {
            cout << "No such person found." << endl;
        }
        system("pause");
        system("cls");
    }

    void GetContacts() {
        string name;
        cout << "Please enter the name of the user you are looking for: " << endl;
        cin >> name;
        int index = IsExist(name);
        if (index > -1) {
            cout << "Customer's Name: " << contactsArry[index].cName << endl;
            cout << "Customer's Gender: " << (contactsArry[index].cGender != 2 ? "Male" : "Female") << endl;
            cout << "Customer's Age: " << contactsArry[index].cAge << endl;
            cout << "Customer's Phone: " << contactsArry[index].cPhone << endl;
            cout << "Customer's Address: " << contactsArry[index].cAdd << endl;
            cout << "Customer's ID: " << contactsArry[index].cID << endl;
        }
        else {
            cout << "No such person found." << endl;
        }
        system("pause");
        system("cls");
    }

    void ModefyContacts() {
        string name;
        cout << "Please enter the user name you want to modify: " << endl;
        cin >> name;
        int index = IsExist(name);
        if (index > -1) {
            string name;
            cout << "Please enter the modified name: " << endl;
            cin >> name;
            contactsArry[index].cName = name;

            int gender;
            cout << "Please enter the modified gender: " << endl;
            cout << "1 Male " << endl;
            cout << "2 Female " << endl;

            while (true) {
                cin >> gender;
                if (gender == 1 || gender == 2) {
                    contactsArry[index].cGender = gender;
                    break;
                }
                cout << "Input error, please re-enter!" << endl;
            }

            int age;
            cout << "Please enter the modified age: " << endl;
            cin >> age;
            contactsArry[index].cAge = age;

            string phone;
            cout << "Please enter the modified phone number: " << endl;
            cin >> phone;
            contactsArry[index].cPhone = phone;

            string add;
            cout << "Please enter the modified address: " << endl;
            cin >> add;
            contactsArry[index].cAdd = add;

            string Id;
            cout << "Please enter the modified ID: " << endl;
            cin >> Id;
            contactsArry[index].cID = Id;

            cout << "Modified successfully!" << endl;
        }
        else {
            cout << "No such person found." << endl;
        }
        system("pause");
        system("cls");
    }

    void ShowVIPMembers() const {
        cout << "VIP Members:" << endl;

        for (int i = 0; i < aCount; i++) {
            if (contactsArry[i].isVIP) {
                cout << "Name: " << contactsArry[i].cName << endl;
                cout << "Gender: " << (contactsArry[i].cGender != 2 ? "Male" : "Female") << endl;
                cout << "Age: " << contactsArry[i].cAge << endl;
                cout << "Phone: " << contactsArry[i].cPhone << endl;
                cout << "Address: " << contactsArry[i].cAdd << endl;
                cout << "ID: " << contactsArry[i].cID << endl;
                cout << "VIP Status: Yes" << endl;
                cout << endl;
            }
        }
        system("pause");
        system("cls");
    }

    void ClearContacts() {
        string choose = "N";
        cout << "Are you sure you want to clear the address book? (Y to confirm/N to cancel)" << endl;

        while (true) {
            cin >> choose;
            if (choose == "Y" || choose == "N") {
                break;
            }
            else {
                cout << "Input is wrong, please re-enter!" << endl;
            }
        }

        if (choose == "Y") {
            aCount = 0;
            cout << "Empty successfully!" << endl;
        }
        else {
            cout << "Operation canceled!" << endl;
        }
        system("pause");
        system("cls");
    }
};

int main() {
    string enteredPassword;

    cout << "Enter the password: ";
    getline(cin, enteredPassword);

    if (enteredPassword != PASSWORD) {
        cout << "Invalid password. Access denied." << endl;
        return 0;
    }

    int select = 0;
    ContactBooks cb;

    while (true) {
        showMenu();

        cin >> select;
        switch (select) {
        case  1:
            cb.AddContacts();
            break;
        case  2:
            cb.ShowContacts();
            break;
        case  3:
            cb.DeleteContacts();
            break;
        case  4:
            cb.GetContacts();
            break;
        case  5:
            cb.ModefyContacts();
            break;
        case  6:
            cb.ShowVIPMembers();
            break;
        case  7:
            cb.ClearContacts();
            break;
        case  0:
            cout << "Welcome to use next time, goodbye!" << endl;
            system("pause");
            return 0;
            break;
        default:
            break;
        }
    }

    system("pause");
    return 0;
}
